/**
 –ó–¥–µ—Å—å –≤—Å—è –ª–æ–≥–∏–∫–∞ –±–æ—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –±–æ–π
 */

import {updateInventoryUI, updateHealthDisplay} from './ui.js';
import {checkVictoryCondition} from "./ending.js";
import {hero, inventory, enemies, completedLines, getCurrentEnemy, setCurrentEnemy } from './game-state.js';
import {log} from './log.js';

export const logMessages = document.querySelector('.log__messages');

let isPlayerTurn = true; // –¥–ª—è –±–ª–æ–∫–∞ –∫–Ω–æ–ø–æ–∫

// –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
// –ê—Ç–∞–∫–∞
function attack() {
  const damage = hero.strength + Math.floor(Math.random() * 3);
  getCurrentEnemy().health -= damage;
  log(`–¢—ã –∞—Ç–∞–∫—É–µ—à—å ${getCurrentEnemy().name} –∏ –Ω–∞–Ω–æ—Å–∏—à—å ${damage} —É—Ä–æ–Ω–∞.`);
  updateHealthDisplay();

  if (getCurrentEnemy().health <= 0) {
    endBattle(true);
  } else {
    setTimeout(enemyTurn, 1000);
  }
}

// –ó–∞—â–∏—Ç–∞
function defend() {
  const heal = 2 + Math.floor(Math.random() * 2);
  hero.health += heal;
  log(`–¢—ã –∑–∞—â–∏—â–∞–µ—à—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å ${heal} –∑–¥–æ—Ä–æ–≤—å—è.`);
  updateHealthDisplay();

  setTimeout(enemyTurn, 1000);
}


// –ú–∞–≥–∏—è
function useMagic() {
  if (hero.magic <= 0) {
    log('–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –º–∞–≥–∏—è!');
    return;
  }
  const damage = 4 + Math.floor(Math.random() * 3);
  getCurrentEnemy().health -= damage;
  hero.magic -= 1;
  log(`–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–∞–≥–∏—é –∏ –Ω–∞–Ω–æ—Å–∏—à—å ${damage} —É—Ä–æ–Ω–∞.`);
  updateHealthDisplay();

  if (getCurrentEnemy().health <= 0) {
    endBattle(true);
  } else {
    setTimeout(enemyTurn, 1000);
  }
}

// —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
function enemyTurn() {
  const damage = getCurrentEnemy().power + Math.floor(Math.random() * 2);
  hero.health -= damage;
  log(`${getCurrentEnemy().name} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç —Ç–µ–±–µ ${damage} —É—Ä–æ–Ω–∞.`);
  updateHealthDisplay();

  if (hero.health <= 0) {
    endBattle(false);
  }
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É, —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–Ω–æ–ø–æ–∫
  if (hero.health > 0) {
    isPlayerTurn = true;
  }
}

// –Ω–∞—á–∞—Ç—å –±–æ–π
export function startBattle(enemyId) {
  document.getElementById('log-messages').innerHTML = ''; // —á–∏—Å—Ç–∏–º –ª–æ–≥
  document.querySelector('.log').classList.remove('hidden'); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥

  // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä-–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  // getCurrentEnemy() = enemies[enemyId];
  setCurrentEnemy(enemies[enemyId]);
  // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–∞–≥–∏–∏
  updateHealthDisplay();

  // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—è –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
  const oldButtons = getCurrentEnemy().element.querySelectorAll('.chapter__choices-button');
  oldButtons.forEach((btn) => {
    const newBtn = btn.cloneNode(true);
    btn.parentNode.replaceChild(newBtn, btn);
  });

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const newButtons = getCurrentEnemy().element.querySelectorAll('.chapter__choices-button');

  // –∫–Ω–æ–ø–∫–∞ –∞—Ç–∞–∫–∏
  newButtons[0].addEventListener('click', () => {
    if (!isPlayerTurn) return;
    isPlayerTurn = false;
    attack();
  });

  // –∫–Ω–æ–ø–∫–∞ –∑–∞—â–∏—Ç—ã
  newButtons[1].addEventListener('click', () => {
    if (!isPlayerTurn) return;
    isPlayerTurn = false;
    defend();
  });

  // –∫–Ω–æ–ø–∫–∞ –º–∞–≥–∏–∏
  newButtons[2].addEventListener('click', () => {
    if (!isPlayerTurn) return;
    if (hero.magic <= 0) {
      log('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –º–∞–≥–∏–∏!');
      return;
    }
    isPlayerTurn = false;
    useMagic();
  });

  // –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  updateInventoryUI();

  // –Ω–∞—á–∏–Ω–∞–µ–º –ø–∏—Å–∞—Ç—å –ª–æ–≥
  log(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π —Å ${getCurrentEnemy().name}!`);
}

// –∫–æ–Ω–µ—Ü –±–æ—è
function endBattle(victory) {
  if (victory) {
    log(`üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª ${getCurrentEnemy().name}!`);

    // –í—ã–¥–∞—á–∞ –∑–Ω–∞–∫–∞ –∑–∞ –ø–æ–±–µ–¥—É, –ø–æ–ª–æ–∂–∏—Ç—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ game-state.js
    if (getCurrentEnemy().name === '–ö–æ—Ç-–¢–µ–Ω—å') {
      inventory['wind-sign-1'] = true;
      log('–¢—ã –ø–æ–ª—É—á–∏–ª üå¨ –ó–Ω–∞–∫ –í–µ—Ç—Ä–∞ I!');
    }
    if (getCurrentEnemy().name === '–õ–∏—Å–∏—Ü–∞-–°—Ç—Ä–∞–∂') {
      inventory['wind-sign-2'] = true;
      log('–¢—ã –ø–æ–ª—É—á–∏–ª üå¨ –ó–Ω–∞–∫ –í–µ—Ç—Ä–∞ II!');
    }
    if (getCurrentEnemy().name === '–¢–µ–Ω—å –°–Ω–∞') {
      inventory['wind-sign-3'] = true;
      log('–¢—ã –ø–æ–ª—É—á–∏–ª üå¨ –ó–Ω–∞–∫ –í–µ—Ç—Ä–∞ III!');
    }

    updateInventoryUI();
  } else {
    log(`üíÄ –¢—ã –ø–∞–ª –≤ –±–æ—é —Å ${getCurrentEnemy().name}...`);
  }

  // –æ—Ç–º–µ—Ç–∫–∞ –ª–∏–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –±–æ–π
  if (getCurrentEnemy().name === '–ö–æ—Ç-–¢–µ–Ω—å') completedLines.line1 = true;
  if (getCurrentEnemy().name === '–õ–∏—Å–∏—Ü–∞-–°—Ç—Ä–∞–∂') completedLines.line2 = true;
  if (getCurrentEnemy().name === '–¢–µ–Ω—å –°–Ω–∞') completedLines.line3 = true;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤—ã–±–æ—Ä –¥—Ä—É–≥–æ–π –ª–∏–Ω–∏–∏
  if (victory) {
    const nextBtn = getCurrentEnemy().element.querySelector('.button__after-battle');
    if (nextBtn) nextBtn.classList.remove('hidden');
  } else {
    // –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    const restartBtn = getCurrentEnemy().element.querySelector('.button__restart');
    if (restartBtn) restartBtn.classList.remove('hidden');
  }

  disableButtons(getCurrentEnemy().element);

  // –º–µ–Ω—è–µ–º, –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ false –∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—è
  isPlayerTurn = true;

  // –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—É, –µ—Å–ª–∏ —Å–æ–±—Ä–∞–ª 3 –∑–Ω–∞–∫–∞
  checkVictoryCondition();
}


// –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –±–æ—è
function disableButtons(section) {
  const buttons = section.querySelectorAll('.chapter__choices-button');
  buttons.forEach(btn => btn.disabled = true);
}




